{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{282:function(s,e,o){\"use strict\";o.r(e);var i=o(28),n=Object(i.a)({},(function(){var s=this,e=s.$createElement,o=s._self._c||e;return o(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[o(\"h3\",{attrs:{id:\"cookie-session-token的区别\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cookie-session-token的区别\"}},[s._v(\"#\")]),s._v(\" cookie.session.token的区别\")]),s._v(\" \"),o(\"h3\",{attrs:{id:\"用处\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用处\"}},[s._v(\"#\")]),s._v(\" 用处\")]),s._v(\" \"),o(\"p\",[s._v(\"三者都是用来记录用户的信息，验证用户\")]),s._v(\" \"),o(\"h3\",{attrs:{id:\"cookie-和-session-的区别\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cookie-和-session-的区别\"}},[s._v(\"#\")]),s._v(\" Cookie 和 Session 的区别\")]),s._v(\" \"),o(\"ul\",[o(\"li\",[s._v(\"安全性： Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。\")]),s._v(\" \"),o(\"li\",[s._v(\"存取值的类型不同：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。\")]),s._v(\" \"),o(\"li\",[s._v(\"有效期不同： Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。\")]),s._v(\" \"),o(\"li\",[s._v(\"存储大小不同： 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。\")])]),s._v(\" \"),o(\"h3\",{attrs:{id:\"token-和-session-的区别\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#token-和-session-的区别\"}},[s._v(\"#\")]),s._v(\" Token 和 Session 的区别\")]),s._v(\" \"),o(\"ul\",[o(\"li\",[s._v(\"Session 是一种记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息。而 Token 是令牌，访问资源接口（API）时所需要的资源凭证。Token 使服务端无状态化，不会存储会话信息。\")]),s._v(\" \"),o(\"li\",[s._v(\"Session 和 Token 并不矛盾，作为身份认证 Token 安全性比 Session 好，因为每一个请求都有签名还能防止监听以及重放攻击，而 Session 就必须依赖链路层来保障通讯安全了。如果你需要实现有状态的会话，仍然可以增加 Session 来在服务器端保存一些状态。\")]),s._v(\" \"),o(\"li\",[s._v(\"所谓 Session 认证只是简单的把 User 信息存储到 Session 里，因为 SessionID 的不可预测性，暂且认为是安全的。而 Token ，如果指的是 OAuth Token 或类似的机制的话，提供的是 认证 和 授权 ，认证是针对用户，授权是针对 App 。其目的是让某 App 有权利访问某用户的信息。这里的 Token 是唯一的。不可以转移到其它 App上，也不可以转到其它用户上。Session 只提供一种简单的认证，即只要有此 SessionID ，即认为有此 User 的全部权利。是需要严格保密的，这个数据应该只保存在站方，不应该共享给其它网站或者第三方 App。所以简单来说：如果你的用户数据可能需要和第三方共享，或者允许第三方调用 API 接口，用 Token 。如果永远只是自己的网站，自己的 App，用什么就无所谓了。\")])]),s._v(\" \"),o(\"h3\",{attrs:{id:\"token-和-jwt-的区别\"}},[o(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#token-和-jwt-的区别\"}},[s._v(\"#\")]),s._v(\" Token 和 JWT 的区别\")]),s._v(\" \"),o(\"p\",[s._v(\"相同：\")]),s._v(\" \"),o(\"ul\",[o(\"li\",[s._v(\"都是访问资源的令牌\")]),s._v(\" \"),o(\"li\",[s._v(\"都可以记录用户的信息\")]),s._v(\" \"),o(\"li\",[s._v(\"都是使服务端无状态化\")]),s._v(\" \"),o(\"li\",[s._v(\"都是只有验证成功后，客户端才能访问服务端上受保护的资源\")])]),s._v(\" \"),o(\"p\",[s._v(\"区别：\")]),s._v(\" \"),o(\"ul\",[o(\"li\",[s._v(\"Token：服务端验证客户端发送过来的 Token 时，还需要查询数据库获取用户信息，然后验证 Token 是否有效。\")]),s._v(\" \"),o(\"li\",[s._v(\"JWT： 将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。\")])])])}),[],!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}