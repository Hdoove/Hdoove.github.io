{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{285:function(t,a,s){\"use strict\";s.r(a);var r=s(28),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h3\",{attrs:{id:\"垃圾回收机制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#垃圾回收机制\"}},[t._v(\"#\")]),t._v(\" 垃圾回收机制\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"标记清除法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#标记清除法\"}},[t._v(\"#\")]),t._v(\" 标记清除法\")]),t._v(\" \"),s(\"p\",[t._v(\"最常见的一种垃圾收集方式，当变量进入环境时，就将这个变量标记为“进入环境”。永远不能释放进入环境的变量所占用的内存，当变量离开环境时，标记为“离开环境”。\")]),t._v(\" \"),s(\"p\",[t._v(\"垃圾回收器在运行的时候会给存储在内存中的变量都打上一个标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记，再次之后再被打上标记的变量将被视为准备删除的变量。最后在垃圾回收器完成内存清除工作，销毁那些带着标记的变量。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"引用计数\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#引用计数\"}},[t._v(\"#\")]),t._v(\" 引用计数\")]),t._v(\" \"),s(\"p\",[t._v(\"追踪每一个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，引用次数加一，相反，当包含对这个值引用的变量又取了另外一个值时，引用次数减一。当引用次数为0时，回收其所占用的内存。\")])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}