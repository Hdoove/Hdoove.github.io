{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{293:function(e,n,t){\"use strict\";t.r(n);var a=t(28),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h3\",{attrs:{id:\"理解继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#理解继承\"}},[e._v(\"#\")]),e._v(\" 理解继承\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"导读\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#导读\"}},[e._v(\"#\")]),e._v(\" 导读\")]),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"相信许多小伙伴们对\"),t(\"code\",[e._v(\"继承\")]),e._v(\"这个概念并不陌生，也是前端技术中较为基础和重点的地方，但是往往还有许多你并不真正了解的地方，先回答我下面这几个问题：\")])]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"实现继承有哪几种方式？\")]),e._v(\" \"),t(\"li\",[e._v(\"了解\"),t(\"code\",[e._v(\"寄生组合继承\")]),e._v(\"吗？它到底解决了什么问题？\")]),e._v(\" \"),t(\"li\",[t(\"code\",[e._v(\"组合继承\")]),e._v(\"的优缺点是什么，和\"),t(\"code\",[e._v(\"寄生组合继承\")]),e._v(\"差别在那？\")]),e._v(\" \"),t(\"li\",[e._v(\"可以手写一个\"),t(\"code\",[e._v(\"原型式继承\")]),e._v(\"吗？\\n\"),t(\"br\"),e._v(\" \"),t(\"br\"),e._v(\"\\n好，如果你可以很好的回答出上面这几个问题，那么你可以跳过这篇文章或者可以帮笔者去检查一下有没有出错或者有纰漏的地方，而那些没有回答上来的下伙伴，不要怀疑自己，快来和我一起在学一下吧。\"),t(\"br\"),t(\"br\")])]),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"h3\",{attrs:{id:\"构造函数继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#构造函数继承\"}},[e._v(\"#\")]),e._v(\" 构造函数继承\")]),e._v(\" \"),t(\"p\",[t(\"code\",[e._v(\"构造函数继承\")]),e._v(\"的思想特别简单，就是在子类型构造函数的内部调用超类型构造函数。函数只不过是在特定环境中执行代码的对象，因此可以通过使用apply()和call()方法也可以在新创建的对象上执行构造函数。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nfunction SuperType(){\\n    this.colors = ['red', 'block', 'white'];\\n}\\n\\nfunction SubType(){\\n    // 继承了SuperType\\n    SuperType.call(this);\\n}\\n\\nlet child1 = new SubType();\\n\\nchild1.colors.push('yellow');\\n\\nconsole.log(child1.colors); // ['red', 'block', 'white','yellow']\\n\\nlet child2 = new SubType();\\n\\nconsole.log(child2.colors); // ['red', 'block', 'white']\\n\\n\")])])]),t(\"p\",[e._v(\"对于原型链来说，构造函数有一个比较大的优势，就是可以在子类型的构造函数中向超类型构造函数传递参数。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nfunction SuperType(name){\\n    this.name = name;\\n}\\n\\nfunction SubType(){\\n    SuperType.call(this, '周元');\\n    this.age = 24;\\n}\\n\\nlet child = new SubType();\\n\\nconsole.log(child.name); // 周元\\n\\nconsole.log(child.age); // 24\\n\\n\")])])]),t(\"blockquote\",[t(\"p\",[e._v(\"缺点\"),t(\"br\")])]),e._v(\" \"),t(\"p\",[e._v(\"方法都是在构造函数中定义的，无法函数复用，而且子类型不能继承超类型原型中定义的方法。实践中也会很少使用构造函数继承。\")]),e._v(\" \"),t(\"br\"),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"h3\",{attrs:{id:\"原型链继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原型链继承\"}},[e._v(\"#\")]),e._v(\" 原型链继承\")]),e._v(\" \"),t(\"p\",[t(\"code\",[e._v(\"原型链继承\")]),e._v(\"的基本思想就是利用原型让一个引用类型继承另一个引用类型的属性和方法。\")]),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"这里先回顾一下构造函数、原型和实例的关系。\"),t(\"br\"),e._v(\"\\n每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。\")])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nfunction SuperType(){\\n    this.colors = ['red', 'block', 'white'];\\n}\\n\\nfunction SubType(){}\\n\\n//继承了SuperType\\nSubType.prototype = new SuperType();\\n\\nlet child1 = new SubType();\\n\\nchild1.colors.push('yellow');\\n\\nconsole.log(child1.colors); // ['red', 'block', 'white','yellow']\\n\\nlet child2 = new SubType();\\n\\nconsole.log(child2.colors); // ['red', 'block', 'white', 'yellow']\\n\\n\")])])]),t(\"p\",[e._v(\"这里SuperType构造函数定义了一个colors属性，该属性包含一个数组类型，SuperType的每个实例都会有各自包含自己数组的colors属性。当SubType通过原型继承了SuperType之后，SubType.prototype就变成了Supertype的一个实例，因此它也拥有一个自己的colors属性。\"),t(\"br\"),e._v(\" \"),t(\"code\",[e._v(\"原型链继承\")]),e._v(\"\\n解决了构造函数继承无法函数复用的问题，但是同时也出现了一些其他的问题。\")]),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"比如：不可以向超类型的构造函数传递参数以及实例共享的问题。实践中也会很少使用\"),t(\"code\",[e._v(\"原型链继承\")]),e._v(\"。\")])]),e._v(\" \"),t(\"br\"),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"h3\",{attrs:{id:\"组合继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组合继承\"}},[e._v(\"#\")]),e._v(\" 组合继承\")]),e._v(\" \"),t(\"p\",[t(\"code\",[e._v(\"组合继承\")]),e._v(\"其实也叫做伪经典继承，指的是将\"),t(\"code\",[e._v(\"原型链\")]),e._v(\"和借用\"),t(\"code\",[e._v(\"构造函数\")]),e._v(\"的技术组合到一起，发挥二者之长的一种继承手段。\")]),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"具体思路就是使用原型链实现对原型属性和原型方法的继承，而通过构造函数来实现对实例属性的继承。\")])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nfunction SuperType(name) {\\n    this.name = name;\\n    this.colors = ['red', 'black', 'white']\\n}\\n\\nSuperType.prototype.sayName = function () {\\n    console.log(this.name);\\n}\\n\\nfunction SubType(name, age) {\\n    SuperType.call(this, name);\\n    this.age = age;\\n}\\n\\nSubType.prototype = new SuperType();\\n\\nSubType.prototype.constructor = SubType;\\n\\nSubType.prototype.sayAge = function () {\\n    console.log(this.age);\\n}\\n\\nlet child1 = new SubType('周元', 24);\\n\\nchild1.colors.push('yellow');\\n\\nconsole.log(child1.colors); // [ 'red', 'black', 'white', 'yellow' ]\\n\\nchild1.sayName(); //周元\\n\\nchild1.sayAge(); // 24\\n\\nlet child2 = new SubType('夭夭', 23);\\n\\nchild2.colors.push('green');\\n\\nconsole.log(child2.colors); // [ 'red', 'black', 'white', 'green' ]\\n\\nchild2.sayName(); //夭夭\\n\\nchild2.sayAge(); // 23\\n\\n\")])])]),t(\"p\",[t(\"code\",[e._v(\"组合继承\")]),e._v(\"的方式避免了\"),t(\"code\",[e._v(\"原型链继承\")]),e._v(\"和\"),t(\"code\",[e._v(\"构造函数继承\")]),e._v(\"的缺陷，融合了他们的优点，成为JS最常用的继承方式。\"),t(\"br\"),e._v(\"但是这种继承方式也是存在着一点小缺点，就是无论什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。\"),t(\"br\"),t(\"br\")]),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"h3\",{attrs:{id:\"原型式继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原型式继承\"}},[e._v(\"#\")]),e._v(\" 原型式继承\")]),e._v(\" \"),t(\"p\",[t(\"code\",[e._v(\"原型式继承\")]),e._v(\"的基本思想就是可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nfunction object(o) {\\n    function F(){}\\n    F.prototype = o;\\n    return new F();\\n}\\n\\n\")])])]),t(\"br\"),e._v(\"\\n在object函数内部，先创建了一个临时的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回这个临时函数的一个实例。\\n\"),t(\"br\"),e._v(\" \"),t(\"br\"),e._v(\"\\n在ECMAScript5中新增了object.create()方法规范了`原型式继承`，这个方法接收两个参数：一个用作新对象原型的对象和（可选）一个为新对象定义额外的属性的对象。在传入一个参数的情况下和object()方法相同。\\n\"),t(\"br\"),t(\"br\"),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"let SuperType = {\\n    name: '吞吞' ,\\n    friends: ['周元', '夭夭', '苍渊']\\n}\\n\\nlet SubType1 = Object.create(SuperType);\\n\\nSubType1.name = '赵牧神';\\n\\nSubType1.friends.push('九宫');\\n\\nlet SubType2 = Object.create(SuperType);\\n\\nSubType2.name = '郗菁';\\n\\nSubType2.friends.push('赵仙隼');\\n\\nconsole.log(SuperType); // { name: '吞吞', friends: [ '周元', '夭夭', '苍渊', '九宫', '赵仙隼' ] }\\n\\n\")])])]),t(\"br\"),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"下面我们再来看一下添加第二个参数的效果\")])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nvar person = {\\n    name: '苏幼微',\\n    friends: ['武瑶', '武煌']\\n}\\n\\nvar child = Object.create(person, {\\n    name: {\\n        value: '叶冰凌'\\n    }\\n});\\n\\nconsole.log(child); // {name: '叶冰凌'}\\n\\n\")])])]),t(\"p\",[e._v(\"关于\"),t(\"code\",[e._v(\"原型式继承\")]),e._v(\"的缺点和\"),t(\"code\",[e._v(\"原型链继承\")]),e._v(\"相同，就是会共享实例。\"),t(\"br\"),t(\"br\")]),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"h3\",{attrs:{id:\"寄生式继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#寄生式继承\"}},[e._v(\"#\")]),e._v(\" 寄生式继承\")]),e._v(\" \"),t(\"p\",[t(\"code\",[e._v(\"寄生式继承\")]),e._v(\"的基本思路与\"),t(\"code\",[e._v(\"寄生构造函数\")]),e._v(\"和\"),t(\"code\",[e._v(\"工厂模式\")]),e._v(\"类似，就是创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后在返回这个对象。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nfunction createAnother(original){\\n    var clone = Object.create(original);  // 通过调用函数创建一个对象\\n    clone.sayHi = function(){ // 以某种方式来增强这个对象\\n        console.log('h1');\\n    }\\n    return clone; // 返回这个对象\\n}\\n\\nvar person = {\\n    name: '伊秋水'\\n}\\n\\nvar newPerson = createAnother(person);\\n\\nnewPerson.sayHi(); // hi\\n\\n\")])])]),t(\"p\",[e._v(\"在主要考虑对象而不是自定义类型和构造函数的情况下，\"),t(\"code\",[e._v(\"寄生式继承\")]),e._v(\"也是一种有用的模式。但是使用\"),t(\"code\",[e._v(\"寄生式继承\")]),e._v(\"来为对象添加函数，会由于不能做到函数复用而降低效率，这一点和\"),t(\"code\",[e._v(\"构造函数继承\")]),e._v(\"类似。\"),t(\"br\"),t(\"br\")]),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"h3\",{attrs:{id:\"寄生组合式继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#寄生组合式继承\"}},[e._v(\"#\")]),e._v(\" 寄生组合式继承\")]),e._v(\" \"),t(\"p\",[t(\"code\",[e._v(\"寄生组合继承\")]),e._v(\"的基本思想就是借用\"),t(\"code\",[e._v(\"构造函数\")]),e._v(\"来继承属性，通过原型链的混合形式来继承方法，而且不必为了指定子类型的原型而调用超类型的构造函数。我们所需要的就是超类型原型的一个副本而已。本质上就是使用\"),t(\"code\",[e._v(\"寄生式继承\")]),e._v(\"来继承超类型的原型，然后再将结果指定给子类型的原型。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nfunction inheritprototype( subType, superType ) {\\n    var prototype = Object.create(superType.prototype); // 创建对象\\n    prototype.constructor = subType; // 指定原型\\n    subType.prototype = prototype; // 指定对象\\n}\\n\\n\")])])]),t(\"p\",[e._v(\"inheritprototype函数实现了\"),t(\"code\",[e._v(\"寄生组合式继承\")]),e._v(\"的最简单形式，主要是分为三步：\"),t(\"br\")]),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"1.创建超类型原型的一个副本。\"),t(\"br\"),e._v(\"\\n2.为创建的副本添加constructor属性。\"),t(\"br\"),e._v(\"\\n3.将新创建的对象赋值给子类型的原型。\")])]),e._v(\" \"),t(\"p\",[e._v(\"然后我们就可以这样使用：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nfunction SuperType(name) {\\n    this.name = name;\\n    this.colors = ['周擎天', '秦玉'];\\n}\\n\\nSuperType.prototype.sayName = function() {\\n    console.log(this.name);\\n}\\n\\nfunction SubType(name, age) {\\n    SuperType.call(this, name);\\n    this.age = age;\\n}\\n\\ninheritprototype(SubType, SuperType);\\n\\nSubType.prototype.sayAge = function(){\\n    console.log(this.age);\\n}\\n\\nvar subType1 = new SubType('绿萝', 22);\\n\\nsubType1.sayName(); // 绿萝\\n\\nsubType1.sayAge(); // 22\\n\\n\")])])]),t(\"p\",[t(\"code\",[e._v(\"寄生组合式继承\")]),e._v(\"只调用一次超类型构造函数，避免在SubType prototype上面创建不必要的、多余的属性。开发者普遍认为\"),t(\"code\",[e._v(\"寄生组合式\")]),e._v(\"继承是引用类型最理想的继承方式。\"),t(\"br\"),t(\"br\")]),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"h3\",{attrs:{id:\"es6继承\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#es6继承\"}},[e._v(\"#\")]),e._v(\" ES6继承\")]),e._v(\" \"),t(\"p\",[e._v(\"``\\nES6继承的核心就是通过extends来实现继承。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"\\nclass SuperType {\\n    constructor(name) {\\n        this.name = name;\\n    }\\n\\n    hello() {\\n        alert('Hello, ' + this.name + '!');\\n    }\\n}\\n\\nclass SubType extends SuperType {\\n    constructor(name, grade) {\\n        super(name); // 记得用super调用父类的构造方法!\\n        this.grade = grade;\\n    }\\n\\n    myGrade() {\\n        alert('I am at grade ' + this.grade);\\n    }\\n}\\n\\nvar subType1 = new SubType('周元', 1);\\n\\nsubType1.hello(); // Hello, 周元!\\n\\nsubType1.myGrade(); // I am at grade 1\\n\\n\")])])]),t(\"blockquote\",[t(\"p\",[e._v(\"使用class继承的时候，我们需要注意一下几点 \"),t(\"br\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"子类必须在constructor方法中调用super方法。\"),t(\"br\")]),e._v(\" \"),t(\"li\",[e._v(\"只有在调用super()之后，才可以使用this关键字\")])])]),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"这里在稍微提一下class的特点 \"),t(\"br\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"class 声明会提升，但不会初始化赋值。\")]),e._v(\" \"),t(\"li\",[e._v(\"class 声明内部会启用严格模式。\")]),e._v(\" \"),t(\"li\",[e._v(\"class 的所有方法（包括静态方法和实例方法）都是不可枚举的。\")]),e._v(\" \"),t(\"li\",[e._v(\"class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有[[construct]]，不能使用 new 来调用.\")]),e._v(\" \"),t(\"li\",[e._v(\"必须使用 new 调用 class。\")]),e._v(\" \"),t(\"li\",[e._v(\"class 内部无法重写类名。\")])])]),e._v(\" \"),t(\"br\"),e._v(\" \"),t(\"p\",[e._v(\"综上 就是我对于前端实现继承的几种方式的一点小见解，文中如有错误，欢迎在评论区指正，如果这篇文章帮助到了你，欢迎点赞👍和关注，😀。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"推荐阅读\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#推荐阅读\"}},[e._v(\"#\")]),e._v(\" 推荐阅读\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"a\",{attrs:{href:\"https://juejin.im/post/5d6b9608f265da03a6532f52\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"妈妈再也不用担心我用不好ECharts了\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"li\",[t(\"a\",{attrs:{href:\"https://juejin.im/post/5d6c731a518825799a553ddd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"一篇文章搞定百度地图基本操作\"),t(\"OutboundLink\")],1)])]),e._v(\" \"),t(\"h4\",{attrs:{id:\"参考\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考\"}},[e._v(\"#\")]),e._v(\" 参考\")]),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"JavaScript高级程序设计\")])])])}),[],!1,null,null,null);n.default=r.exports}}]);","extractedComments":[]}